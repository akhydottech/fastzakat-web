// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AddressSearchAddressData, AddressSearchAddressResponse, DropOffPointsReadDropOffPointsData, DropOffPointsReadDropOffPointsResponse, DropOffPointsCreateDropOffPointData, DropOffPointsCreateDropOffPointResponse, DropOffPointsReadDropOffPointData, DropOffPointsReadDropOffPointResponse, DropOffPointsUpdateDropOffPointData, DropOffPointsUpdateDropOffPointResponse, DropOffPointsDeleteDropOffPointData, DropOffPointsDeleteDropOffPointResponse, DropOffPointsSetDropOffPointDoneData, DropOffPointsSetDropOffPointDoneResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, MembersGetOrganizationsResponse, MembersAcceptInvitationData, MembersAcceptInvitationResponse, MembersDeleteOrganizationData, MembersDeleteOrganizationResponse, OrganizationsInviteUserToOrganizationData, OrganizationsInviteUserToOrganizationResponse, OrganizationsGetMembersResponse, OrganizationsDeleteMemberData, OrganizationsDeleteMemberResponse, PrivateCreateUserData, PrivateCreateUserResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class AddressService {
    /**
     * Search Address
     * @param data The data for the request.
     * @param data.query
     * @returns AddressResponse Successful Response
     * @throws ApiError
     */
    public static searchAddress(data: AddressSearchAddressData): CancelablePromise<AddressSearchAddressResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/address/search',
            query: {
                query: data.query
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DropOffPointsService {
    /**
     * Read Drop Off Points
     * Retrieve drop off points.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.usePagination
     * @returns DropOffPointsPublic Successful Response
     * @throws ApiError
     */
    public static readDropOffPoints(data: DropOffPointsReadDropOffPointsData = {}): CancelablePromise<DropOffPointsReadDropOffPointsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/drop-off-points/',
            query: {
                skip: data.skip,
                limit: data.limit,
                use_pagination: data.usePagination
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Drop Off Point
     * Create new drop off point.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns DropOffPointPublic Successful Response
     * @throws ApiError
     */
    public static createDropOffPoint(data: DropOffPointsCreateDropOffPointData): CancelablePromise<DropOffPointsCreateDropOffPointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/drop-off-points/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Drop Off Point
     * Get drop off point by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns DropOffPointPublic Successful Response
     * @throws ApiError
     */
    public static readDropOffPoint(data: DropOffPointsReadDropOffPointData): CancelablePromise<DropOffPointsReadDropOffPointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/drop-off-points/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Drop Off Point
     * Update a drop off point.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns DropOffPointPublic Successful Response
     * @throws ApiError
     */
    public static updateDropOffPoint(data: DropOffPointsUpdateDropOffPointData): CancelablePromise<DropOffPointsUpdateDropOffPointResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/drop-off-points/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Drop Off Point
     * Delete a drop off point.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteDropOffPoint(data: DropOffPointsDeleteDropOffPointData): CancelablePromise<DropOffPointsDeleteDropOffPointResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/drop-off-points/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Set Drop Off Point Done
     * Set a drop off point as done.
     * @param data The data for the request.
     * @param data.id
     * @param data.isDone
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static setDropOffPointDone(data: DropOffPointsSetDropOffPointDoneData): CancelablePromise<DropOffPointsSetDropOffPointDoneResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/drop-off-points/{id}/done',
            path: {
                id: data.id
            },
            query: {
                is_done: data.isDone
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class MembersService {
    /**
     * Get Organizations
     * Get all organizations the current user is a member of.
     * @returns OrganizationMembershipsResponse Successful Response
     * @throws ApiError
     */
    public static getOrganizations(): CancelablePromise<MembersGetOrganizationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/members/organizations'
        });
    }
    
    /**
     * Accept Invitation
     * Accept an invitation to join an organization.
     * @param data The data for the request.
     * @param data.invitationId
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static acceptInvitation(data: MembersAcceptInvitationData): CancelablePromise<MembersAcceptInvitationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/members/invitations/{invitation_id}/accept',
            path: {
                invitation_id: data.invitationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Organization
     * Delete a member from an organization.
     * @param data The data for the request.
     * @param data.memberId
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static deleteOrganization(data: MembersDeleteOrganizationData): CancelablePromise<MembersDeleteOrganizationResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/members/{member_id}',
            path: {
                member_id: data.memberId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class OrganizationsService {
    /**
     * Invite User To Organization
     * Send an invitation to a user to join the organization.
     * @param data The data for the request.
     * @param data.email
     * @returns MemberInfo Successful Response
     * @throws ApiError
     */
    public static inviteUserToOrganization(data: OrganizationsInviteUserToOrganizationData): CancelablePromise<OrganizationsInviteUserToOrganizationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/organizations/invite',
            query: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Members
     * Get all members of the current organization.
     * @returns MembersResponse Successful Response
     * @throws ApiError
     */
    public static getMembers(): CancelablePromise<OrganizationsGetMembersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/organizations/members'
        });
    }
    
    /**
     * Delete Member
     * Delete a member from the current organization.
     * @param data The data for the request.
     * @param data.memberId
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static deleteMember(data: OrganizationsDeleteMemberData): CancelablePromise<OrganizationsDeleteMemberResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/organizations/members/{member_id}',
            path: {
                member_id: data.memberId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}